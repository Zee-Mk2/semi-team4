<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >


<!-- Dao를 Mapper Interface로 대체 할 예정, namespace=Class의 풀네임 선언 필요 -->
<mapper namespace="com.multi.mvc.concert.model.mapper.ConcertMapper">


	<select id="selectConcertAll" resultType="ConcertVO">
		SELECT * FROM concert
	</select>
	
	<select id="concertBest" resultType="ConcertVO">
		(SELECT conNm, genre, startDate, endDate, conHallNm, posterImg, conId FROM concert WHERE genre LIKE '서양음악(클래식)' ORDER BY views DESC LIMIT 1)
		UNION
		(SELECT conNm, genre, startDate, endDate, conHallNm, posterImg, conId FROM concert WHERE genre LIKE '대중음악' ORDER BY views DESC LIMIT 1)
		UNION
		(SELECT conNm, genre, startDate, endDate, conHallNm, posterImg, conId FROM concert WHERE genre LIKE '뮤지컬' ORDER BY views DESC LIMIT 1)
		UNION
		(SELECT conNm, genre, startDate, endDate, conHallNm, posterImg, conId FROM concert WHERE genre LIKE '연극' ORDER BY views DESC LIMIT 1)
		UNION
		(SELECT conNm, genre, startDate, endDate, conHallNm, posterImg, conId FROM concert WHERE genre LIKE '서커스/마술' ORDER BY views DESC LIMIT 1)
		UNION
		(SELECT conNm, genre, startDate, endDate, conHallNm, posterImg, conId FROM concert WHERE genre LIKE '한국음악(국악)' ORDER BY views DESC LIMIT 1)
		UNION
		(SELECT conNm, genre, startDate, endDate, conHallNm, posterImg, conId FROM concert WHERE genre LIKE '무용' ORDER BY views DESC LIMIT 1)
		UNION
		(SELECT conNm, genre, startDate, endDate, conHallNm, posterImg, conId FROM concert WHERE genre LIKE '대중무용' ORDER BY views DESC LIMIT 1)
		UNION
		(SELECT conNm, genre, startDate, endDate, conHallNm, posterImg, conId FROM concert WHERE genre LIKE '복합' ORDER BY views DESC LIMIT 2)
	</select>
	
	<select id="concSearch" resultType="ConcertVO" parameterType="Map">
		SELECT C.conId, C.conNm, C.genre, C.startDate, C.endDate, C.conHallNm, C.posterImg, C.minPrice
		FROM concert C
		LEFT JOIN (
			SELECT conId, count(*) AS bookmarks
			FROM concBookmark
			GROUP BY conId
		) bookmarks ON C.conId = bookmarks.conId
		WHERE C.status = 'Y'
		<if test="min != null and max != null">
			AND #{min} &lt;= C.minPrice AND C.minPrice &lt;= #{max}
		</if>
		<if test="genre != null and genre != ''">
			AND C.genre LIKE '%${genre}%'
		</if>
		<if test="viewAge != null and viewAge != ''">
			AND C.viewAge >= #{viewAge}
		</if>
		<if test="conState != null and conState != ''">
			AND C.conState = '%${conState}%'
		</if>
		<if test="searchType == 'concKeyword'">
			AND C.conNm LIKE '%${keyword}%'
		</if>
		<if test="searchType == 'hallKeyword'">
			AND C.conHallNm LIKE '%${keyword}%'
		</if>
		<if test="reservDate != null and reservDate != ''">
			AND C.startDate &lt; #{reservDate} AND #{reservDate} &lt; C.endDate
		</if>
		ORDER BY bookmarks.bookmarks DESC
		LIMIT #{limit} OFFSET #{offset}
	</select>
	
	<select id="countSearch" parameterType="Map" resultType="int">
		SELECT count(*)
		FROM concert
		WHERE status = 'Y'
		<if test="min != null and max != null">
			AND #{min} &lt;= minPrice AND minPrice &lt;= #{max}
		</if>
		<if test="genre != null and genre != ''">
			AND genre LIKE '%${genre}%'
		</if>
		<if test="viewAge != null and viewAge != ''">
			AND viewAge >= #{viewAge}
		</if>
		<if test="conState != null and conState != ''">
			AND conState = '%${conState}%'
		</if>
		<if test="searchType == 'concKeyword'">
			AND conNm LIKE '%${keyword}%'
		</if>
		<if test="searchType == 'hallKeyword'">
			AND conHallNm LIKE '%${keyword}%'
		</if>
		<if test="reservDate != null and reservDate != ''">
			AND startDate &lt; #{reservDate} AND #{reservDate} &lt; endDate
		</if>
	</select>
	
	<select id="concDetailById" parameterType="Map" resultType="concertVO">
		SELECT Conc.*, Hall.la, Hall.lo, bookmarks.bookmarks, rating.avgRating, rating.numReviews
		FROM concert Conc
		LEFT JOIN conHall Hall ON Conc.conHallId = Hall.conHallId
		LEFT JOIN (
			SELECT conId, count(*) AS bookmarks
			FROM concBookmark
			WHERE conId = #{conId}
			GROUP BY conId
		) bookmarks ON Conc.conId = bookmarks.conId
		LEFT JOIN (
		SELECT contentId, SUM(rating) / count(*) AS avgRating, count(*) AS numReviews
			FROM board
			WHERE contentId = #{conId}
			GROUP BY contentId
		) rating ON Conc.conId = rating.contentId
		WHERE Conc.conId = #{conId}
	</select>
	
	<select id="getConcBookmark" parameterType="int" resultType="ConcBookmark">
		SELECT * FROM concBookmark WHERE mno = ${mno};
	</select>
	
	<insert id="concBookmark" parameterType="Map">
		INSERT INTO concBookmark VALUES(#{conId}, #{mno}, DEFAULT);
	</insert>
	
	<delete id="concBookmarkRemove">
		DELETE FROM concBookmark WHERE conId = #{conId} AND mno = #{mno};
	</delete>
	
	<select id="HallIdOfConcTable" parameterType="Map" resultType="String">
		SELECT conHallId FROM concert WHERE conId = #{conId}
	</select>
	
	<select id="getConhallId" parameterType="String" resultType="String">
		SELECT conHallId FROM conHall WHERE conHallId = #{hallId}
	</select>
	
	<update id="concViewsPlus" parameterType="Map">
		UPDATE concert SET views = views + 1 WHERE conId = #{conId}
	</update>
	
	<select id="whatTheFuckIsThis" parameterType="Map" resultType="HallSeats">
		SELECT
		    cs.conTime AS startTime,
		    COALESCE(t.R - booked.R, t.R) AS R,
		    COALESCE(t.S - booked.S, t.S) AS S,
		    COALESCE(t.A - booked.A, t.A) AS A
		FROM
		    concSchedule cs
		    JOIN
		    (
		        SELECT
		            IFNULL(MAX(CASE WHEN seatType = 'R석' THEN count END), 0) AS 'R',
		            IFNULL(MAX(CASE WHEN seatType = 'S석' THEN count END), 0) AS 'S',
		            IFNULL(MAX(CASE WHEN seatType = 'A석' THEN count END), 0) AS 'A'
		        FROM
		            (
		                SELECT seatType, COUNT(*) AS count
		                FROM seat
		                WHERE conHallId = 'FC003045'
		                GROUP BY seatType
		            ) AS subquery
		    ) AS t
		    LEFT JOIN
		    (
		        SELECT
		            resvTime,
		            SUM(CASE WHEN seatType = 'R석' THEN count ELSE 0 END) AS R,
		            SUM(CASE WHEN seatType = 'S석' THEN count ELSE 0 END) AS S,
		            SUM(CASE WHEN seatType = 'A석' THEN count ELSE 0 END) AS A
		        FROM
		            (
		                SELECT resvTime, seatType, COUNT(*) AS count
		                FROM concReserve
		                WHERE conHallId = 'FC003045'
		                AND status = 'Y'
		                GROUP BY resvTime, seatType
		            ) AS subquery
		        GROUP BY resvTime
		    ) booked ON (booked.resvTime = cs.conTime)
		WHERE conTime LIKE '${selectedDate}%'
		ORDER BY conTime;
	</select>
	
	<select id="getPrices" parameterType="Map" resultType="HallSeats">
		SELECT 
			MAX(CASE WHEN seatType = 'R석' THEN seatPrice END) AS R,
			MAX(CASE WHEN seatType = 'S석' THEN seatPrice END) AS S,
			MAX(CASE WHEN seatType = 'A석' THEN seatPrice END) AS A
		FROM seat
		WHERE conHallId = #{conHallId}
		GROUP BY conHallId;
	</select>
	
	<select id="bookedSeats" parameterType="Map" resultType="String">
		SELECT S.seatNo FROM concReserve R
		JOIN (
			SELECT * FROM seat
		) S ON (R.seatNo = S.seatNo)
		WHERE R.conHallId = 'FC003045' AND R.resvTime = #{startTime} AND R.status = 'Y';
	</select>
	
	<insert id="reqBooking" parameterType="Map">
		INSERT INTO concReserve VALUES(DEFAULT, #{mno}, #{conId}, #{conHallId}, #{seatNo}, #{seatType}, #{userName}, #{tel}, #{time-select}, DEFAULT);
	</insert>
	
	<select id="getNearConHall" parameterType="String" resultType="ConHall">
		SELECT * FROM conHall WHERE conHallId = #{conHallId}
	</select>
	
	<select id="conThemeTopTen" parameterType="Map" resultType="ConcertVO">
	SELECT conID, conNm, conHallNm, startTime, runtime , posterImg FROM concert WHERE
		 genre=#{genre}
	AND conState = '공연중' 
	Limit 10;
	</select>
	
	<select id="getThemaCunt" resultType="ThemaCunt">
	SELECT A.classic, B.pm, C.musical, D.play, E.cm, F.tkm, G.dance, H.compound
	FROM (SELECT count(*) AS classic FROM concert WHERE genre LIKE '%서양음악(클래식)%') A,
		 (SELECT count(*) AS pm FROM concert WHERE genre LIKE '%대중음악%') B,
         (SELECT count(*) AS musical FROM concert WHERE genre LIKE '%뮤지컬%') C,
         (SELECT count(*) AS play FROM concert WHERE genre LIKE '%연극%') D,
         (SELECT count(*) AS cm FROM concert WHERE genre LIKE '%서커스/마술%') E,
         (SELECT count(*) AS tkm FROM concert WHERE genre LIKE '%한국음악(국악)%') F,
         (SELECT count(*) AS dance FROM concert WHERE genre LIKE '%무용%') G,
		 (SELECT count(*) AS compound FROM concert WHERE genre LIKE '%복합%') H;
	</select>
	
	<select id="pickReview" resultType="Board">
		SELECT b.*, conc.conNm FROM board b
		    JOIN concert conc ON b.contentId = conc.conId
			WHERE b.boardTag = 'conc' AND b.boardStatus = 'Y' AND b.boardCat = 'review'
			ORDER BY b.boardViews DESC
			LIMIT 3;
	</select>
	
	<select id="pickFree" resultType="Board">
		SELECT * FROM board
			WHERE boardCat = 'free' AND boardStatus = 'Y'
			ORDER BY boardCreateDate DESC
			LIMIT 8
	</select>
</mapper>

